// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: livros.sql

package db

import (
	"context"
	"database/sql"
)

const createLivro = `-- name: CreateLivro :one
INSERT INTO "Livros" (
    usuario_id,
    titulo,
    autor,
    data_publicacao,
    editora,
    resumo,
    categoria
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
) RETURNING livro_id, usuario_id, titulo, autor, data_publicacao, editora, resumo, categoria
`

type CreateLivroParams struct {
	UsuarioID      sql.NullInt32  `json:"usuario_id"`
	Titulo         sql.NullString `json:"titulo"`
	Autor          sql.NullString `json:"autor"`
	DataPublicacao sql.NullTime   `json:"data_publicacao"`
	Editora        sql.NullString `json:"editora"`
	Resumo         sql.NullString `json:"resumo"`
	Categoria      Categorias     `json:"categoria"`
}

func (q *Queries) CreateLivro(ctx context.Context, arg CreateLivroParams) (Livro, error) {
	row := q.db.QueryRowContext(ctx, createLivro,
		arg.UsuarioID,
		arg.Titulo,
		arg.Autor,
		arg.DataPublicacao,
		arg.Editora,
		arg.Resumo,
		arg.Categoria,
	)
	var i Livro
	err := row.Scan(
		&i.LivroID,
		&i.UsuarioID,
		&i.Titulo,
		&i.Autor,
		&i.DataPublicacao,
		&i.Editora,
		&i.Resumo,
		&i.Categoria,
	)
	return i, err
}

const getLivro = `-- name: GetLivro :one
SELECT livro_id, usuario_id, titulo, autor, data_publicacao, editora, resumo, categoria FROM "Livros"
WHERE livro_id = $1 LIMIT 1
`

func (q *Queries) GetLivro(ctx context.Context, livroID int32) (Livro, error) {
	row := q.db.QueryRowContext(ctx, getLivro, livroID)
	var i Livro
	err := row.Scan(
		&i.LivroID,
		&i.UsuarioID,
		&i.Titulo,
		&i.Autor,
		&i.DataPublicacao,
		&i.Editora,
		&i.Resumo,
		&i.Categoria,
	)
	return i, err
}

const listLivrosByUser = `-- name: ListLivrosByUser :many
SELECT livro_id, usuario_id, titulo, autor, data_publicacao, editora, resumo, categoria FROM "Livros"
WHERE usuario_id = $1
ORDER BY titulo
`

func (q *Queries) ListLivrosByUser(ctx context.Context, usuarioID sql.NullInt32) ([]Livro, error) {
	rows, err := q.db.QueryContext(ctx, listLivrosByUser, usuarioID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Livro
	for rows.Next() {
		var i Livro
		if err := rows.Scan(
			&i.LivroID,
			&i.UsuarioID,
			&i.Titulo,
			&i.Autor,
			&i.DataPublicacao,
			&i.Editora,
			&i.Resumo,
			&i.Categoria,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOwner = `-- name: UpdateOwner :exec
UPDATE "Livros"
SET usuario_id = $2
WHERE livro_id = $1
`

type UpdateOwnerParams struct {
	LivroID   int32         `json:"livro_id"`
	UsuarioID sql.NullInt32 `json:"usuario_id"`
}

func (q *Queries) UpdateOwner(ctx context.Context, arg UpdateOwnerParams) error {
	_, err := q.db.ExecContext(ctx, updateOwner, arg.LivroID, arg.UsuarioID)
	return err
}
