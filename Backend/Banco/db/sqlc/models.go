// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0

package db

import (
	"database/sql"
	"fmt"
	"time"
)

type Categorias string

const (
	CategoriasFantasia                   Categorias = "Fantasia"
	CategoriasFicocientfica              Categorias = "Ficção científica"
	CategoriasDistopia                   Categorias = "Distopia"
	CategoriasAoeaventura                Categorias = "Ação e aventura"
	CategoriasFicoPolicial               Categorias = "Ficção Policial"
	CategoriasHorror                     Categorias = "Horror"
	CategoriasThrillereSuspense          Categorias = "Thriller e Suspense"
	CategoriasFicohistrica               Categorias = "Ficção histórica"
	CategoriasRomance                    Categorias = "Romance"
	CategoriasFicoFeminina               Categorias = "Ficção Feminina"
	CategoriasLGBTQ                      Categorias = "LGBTQ+"
	CategoriasFicoContempornea           Categorias = "Ficção Contemporânea"
	CategoriasRealismomgico              Categorias = "Realismo mágico"
	CategoriasGraphicNovel               Categorias = "Graphic Novel"
	CategoriasConto                      Categorias = "Conto"
	CategoriasJovemadulto                Categorias = "Jovem adulto"
	CategoriasNovoAdulto                 Categorias = "Novo Adulto"
	CategoriasInfantil                   Categorias = "Infantil"
	CategoriasMemriaseautobiografia      Categorias = "Memórias e autobiografia"
	CategoriasBiografia                  Categorias = "Biografia"
	CategoriasGastronomia                Categorias = "Gastronomia"
	CategoriasArteeFotografia            Categorias = "Arte e Fotografia"
	CategoriasAutoajuda                  Categorias = "Autoajuda"
	CategoriasHistria                    Categorias = "História"
	CategoriasViajem                     Categorias = "Viajem"
	CategoriasCrimesReais                Categorias = "Crimes Reais"
	CategoriasHumor                      Categorias = "Humor"
	CategoriasEnsaios                    Categorias = "Ensaios"
	CategoriasGuiasComofazer             Categorias = "Guias & Como fazer"
	CategoriasReligioeEspiritualidade    Categorias = "Religião e Espiritualidade"
	CategoriasHumanidadeseCinciasSociais Categorias = "Humanidades e Ciências Sociais"
	CategoriasPaternidadeefamlia         Categorias = "Paternidade e família"
	CategoriasTecnologiaeCincia          Categorias = "Tecnologia e Ciência"
)

func (e *Categorias) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Categorias(s)
	case string:
		*e = Categorias(s)
	default:
		return fmt.Errorf("unsupported scan type for Categorias: %T", src)
	}
	return nil
}

type Status string

const (
	StatusABERTA     Status = "ABERTA"
	StatusCANCELADA  Status = "CANCELADA"
	StatusNEGOCIANDO Status = "NEGOCIANDO"
	StatusFINALIZADA Status = "FINALIZADA"
)

func (e *Status) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Status(s)
	case string:
		*e = Status(s)
	default:
		return fmt.Errorf("unsupported scan type for Status: %T", src)
	}
	return nil
}

type Livro struct {
	LivroID        int32          `json:"livro_id"`
	UsuarioID      sql.NullInt32  `json:"usuario_id"`
	Titulo         sql.NullString `json:"titulo"`
	Autor          sql.NullString `json:"autor"`
	DataPublicacao sql.NullTime   `json:"data_publicacao"`
	Editora        sql.NullString `json:"editora"`
	Resumo         sql.NullString `json:"resumo"`
	Categoria      Categorias     `json:"categoria"`
}

type Publicaco struct {
	PublicacaoID int32          `json:"publicacao_id"`
	UsuarioID    sql.NullInt32  `json:"usuario_id"`
	LivroID      sql.NullInt32  `json:"livro_id"`
	Local        sql.NullString `json:"local"`
	StatusAtual  Status         `json:"status_atual"`
}

type Transferencia struct {
	TransferenciaID    int32          `json:"transferencia_id"`
	PublicacaoID       sql.NullInt32  `json:"publicacao_id"`
	InteressadoID      sql.NullInt32  `json:"interessado_id"`
	LivroInteressadoID sql.NullInt32  `json:"livro_interessado_id"`
	DataInicio         sql.NullTime   `json:"data_inicio"`
	DataFinalizacao    sql.NullTime   `json:"data_finalizacao"`
	LocalEncontro      sql.NullString `json:"local_encontro"`
	Finalizado         sql.NullBool   `json:"finalizado"`
}

type Usuario struct {
	UsuarioID      int32     `json:"usuario_id"`
	Nome           string    `json:"nome"`
	Cpf            string    `json:"cpf"`
	Telefone       string    `json:"telefone"`
	Email          string    `json:"email"`
	Endereco       string    `json:"endereco"`
	DataNascimento time.Time `json:"data_nascimento"`
	Senha          int16     `json:"senha"`
}
