// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: publicacoes.sql

package db

import (
	"context"
	"database/sql"
)

const createPublicacao = `-- name: CreatePublicacao :one
INSERT INTO "Publicacoes" (
    usuario_id,
    livro_id,
    "local",
    status_atual
) VALUES (
    $1, $2, $3, $4
) RETURNING publicacao_id, usuario_id, livro_id, local, status_atual
`

type CreatePublicacaoParams struct {
	UsuarioID   sql.NullInt32  `json:"usuario_id"`
	LivroID     sql.NullInt32  `json:"livro_id"`
	Local       sql.NullString `json:"local"`
	StatusAtual Status         `json:"status_atual"`
}

func (q *Queries) CreatePublicacao(ctx context.Context, arg CreatePublicacaoParams) (Publicaco, error) {
	row := q.db.QueryRowContext(ctx, createPublicacao,
		arg.UsuarioID,
		arg.LivroID,
		arg.Local,
		arg.StatusAtual,
	)
	var i Publicaco
	err := row.Scan(
		&i.PublicacaoID,
		&i.UsuarioID,
		&i.LivroID,
		&i.Local,
		&i.StatusAtual,
	)
	return i, err
}

const getPublicacao = `-- name: GetPublicacao :one
SELECT publicacao_id, usuario_id, livro_id, local, status_atual FROM "Publicacoes"
WHERE publicacao_id = $1 LIMIT 1
`

func (q *Queries) GetPublicacao(ctx context.Context, publicacaoID int32) (Publicaco, error) {
	row := q.db.QueryRowContext(ctx, getPublicacao, publicacaoID)
	var i Publicaco
	err := row.Scan(
		&i.PublicacaoID,
		&i.UsuarioID,
		&i.LivroID,
		&i.Local,
		&i.StatusAtual,
	)
	return i, err
}

const listPublicacoesByUser = `-- name: ListPublicacoesByUser :many
SELECT publicacao_id, usuario_id, livro_id, local, status_atual FROM "Publicacoes"
WHERE usuario_id = $1
ORDER BY publicacao_id
`

func (q *Queries) ListPublicacoesByUser(ctx context.Context, usuarioID sql.NullInt32) ([]Publicaco, error) {
	rows, err := q.db.QueryContext(ctx, listPublicacoesByUser, usuarioID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Publicaco
	for rows.Next() {
		var i Publicaco
		if err := rows.Scan(
			&i.PublicacaoID,
			&i.UsuarioID,
			&i.LivroID,
			&i.Local,
			&i.StatusAtual,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePubStatus = `-- name: UpdatePubStatus :exec
UPDATE "Publicacoes"
SET status_atual = $2
WHERE publicacao_id = $1
`

type UpdatePubStatusParams struct {
	PublicacaoID int32  `json:"publicacao_id"`
	StatusAtual  Status `json:"status_atual"`
}

func (q *Queries) UpdatePubStatus(ctx context.Context, arg UpdatePubStatusParams) error {
	_, err := q.db.ExecContext(ctx, updatePubStatus, arg.PublicacaoID, arg.StatusAtual)
	return err
}
