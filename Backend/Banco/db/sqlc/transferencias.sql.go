// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: transferencias.sql

package db

import (
	"context"
	"database/sql"
)

const createTransferencia = `-- name: CreateTransferencia :one
INSERT INTO "Transferencias" (
    publicacao_id,
    interessado_id,
    livro_interessado_id,
    data_inicio,
    data_finalizacao,
    local_encontro,
    finalizado
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
) RETURNING transferencia_id, publicacao_id, interessado_id, livro_interessado_id, data_inicio, data_finalizacao, local_encontro, finalizado
`

type CreateTransferenciaParams struct {
	PublicacaoID       sql.NullInt32  `json:"publicacao_id"`
	InteressadoID      sql.NullInt32  `json:"interessado_id"`
	LivroInteressadoID sql.NullInt32  `json:"livro_interessado_id"`
	DataInicio         sql.NullTime   `json:"data_inicio"`
	DataFinalizacao    sql.NullTime   `json:"data_finalizacao"`
	LocalEncontro      sql.NullString `json:"local_encontro"`
	Finalizado         sql.NullBool   `json:"finalizado"`
}

func (q *Queries) CreateTransferencia(ctx context.Context, arg CreateTransferenciaParams) (Transferencia, error) {
	row := q.db.QueryRowContext(ctx, createTransferencia,
		arg.PublicacaoID,
		arg.InteressadoID,
		arg.LivroInteressadoID,
		arg.DataInicio,
		arg.DataFinalizacao,
		arg.LocalEncontro,
		arg.Finalizado,
	)
	var i Transferencia
	err := row.Scan(
		&i.TransferenciaID,
		&i.PublicacaoID,
		&i.InteressadoID,
		&i.LivroInteressadoID,
		&i.DataInicio,
		&i.DataFinalizacao,
		&i.LocalEncontro,
		&i.Finalizado,
	)
	return i, err
}

const getTransferencia = `-- name: GetTransferencia :one
SELECT transferencia_id, publicacao_id, interessado_id, livro_interessado_id, data_inicio, data_finalizacao, local_encontro, finalizado FROM "Transferencias"
WHERE transferencia_id = $1 LIMIT 1
`

func (q *Queries) GetTransferencia(ctx context.Context, transferenciaID int32) (Transferencia, error) {
	row := q.db.QueryRowContext(ctx, getTransferencia, transferenciaID)
	var i Transferencia
	err := row.Scan(
		&i.TransferenciaID,
		&i.PublicacaoID,
		&i.InteressadoID,
		&i.LivroInteressadoID,
		&i.DataInicio,
		&i.DataFinalizacao,
		&i.LocalEncontro,
		&i.Finalizado,
	)
	return i, err
}

const listTransferenciasByUser = `-- name: ListTransferenciasByUser :many
SELECT transferencia_id, publicacao_id, interessado_id, livro_interessado_id, data_inicio, data_finalizacao, local_encontro, finalizado FROM "Transferencias"
WHERE interessado_id = $1
ORDER BY transferencia_id
`

func (q *Queries) ListTransferenciasByUser(ctx context.Context, interessadoID sql.NullInt32) ([]Transferencia, error) {
	rows, err := q.db.QueryContext(ctx, listTransferenciasByUser, interessadoID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transferencia
	for rows.Next() {
		var i Transferencia
		if err := rows.Scan(
			&i.TransferenciaID,
			&i.PublicacaoID,
			&i.InteressadoID,
			&i.LivroInteressadoID,
			&i.DataInicio,
			&i.DataFinalizacao,
			&i.LocalEncontro,
			&i.Finalizado,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
